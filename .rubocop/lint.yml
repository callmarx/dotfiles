# Use `x -= y` instead of `x =- y`.
Lint/AmbiguousAssignment:
  Enabled: true

# Use `some_method(a) { |val| puts val }` instead of `some_method a { |val| puts val }`.
Lint/AmbiguousBlockAssociation:
  Enabled: true

# Use `do_something(*some_array)` instead of `do_something *some_array`.
# NOTE: This is ignored if Style/MethodCallWithArgsParentheses is enabled.
Lint/AmbiguousOperator:
  Enabled: true

# Use `a + (b * c)` instead of `a + b * c`.
Lint/AmbiguousOperatorPrecedence:
  Enabled: true

# Use `(1..2).to_a` instead of `1..2.to_a`.
Lint/AmbiguousRange:
  Enabled: true

# Use `do_something(/pattern/i)` instead of `do_something /pattern/i`.
Lint/AmbiguousRegexpLiteral:
  Enabled: true

# Use `if (some_var = value)` instead of `if some_var = value`.
Lint/AssignmentInCondition:
  Enabled: true

# BigDecimal.new() is deprecated since BigDecimal 1.3.3.
Lint/BigDecimalNew:
  Enabled: true

# Check for bad uses like `if a.x != 0 && a.x != 0`.
Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: true

# Use `true` instead of `:true`.
Lint/BooleanSymbol:
  Enabled: true

# Use `def bake(pie:) ... end` instead of `def bake(pie: pie) ... end`.
Lint/CircularArgumentReference:
  Enabled: true

# Do not define constants within a block. 
Lint/ConstantDefinitionInBlock:
  Enabled: true

# Checks for overwriting an exception with an exception result by use rescue ⇒.
Lint/ConstantOverwrittenInRescue:
  Enabled: true

## DISABLED
# # Check that certain constants are fully qualified.
# # NOTE: This is not enabled by default because it would mark a lot of offenses unnecessarily.
# Lint/ConstantResolution:
#   Enabled: false

# Checks for debug calls (such as `debugger` or `binding.pry`) that should not be kept for production code.
Lint/Debugger:
  Enabled: true

# Checks for uses of the deprecated class method usages.
Lint/DeprecatedClassMethods:
  Enabled: true

# Checks for deprecated constants.
Lint/DeprecatedConstants:
  Enabled: true

# Checks for algorithmic constants for OpenSSL::Cipher and OpenSSL::Digest deprecated since OpenSSL version 2.2.0.
Lint/DeprecatedOpenSSLConstant:
  Enabled: true

# ## DISABLED
# # Checks constructors for disjunctive assignments (||=) that should be plain assignments.
# # NOTE: This cop is unsafe because it can register a false positive when a method is redefined in a subclass that
# # calls super.
# Lint/DisjunctiveAssignmentInConstructor:
#   Enabled: true

# Checks that there are no repeated bodies within if/unless, case-when, case-in and rescue constructs. 
Lint/DuplicateBranch:
  Enabled: true

# Checks that there are no repeated conditions used in case 'when' expressions.
Lint/DuplicateCaseCondition:
  Enabled: true

# Checks that there are no repeated conditions used in if 'elsif'.
Lint/DuplicateElsifCondition:
  Enabled: true

# Checks for duplicated keys in hash literals.
Lint/DuplicateHashKey:
  Enabled: true

# Checks for duplicated magic comments.
Lint/DuplicateMagicComment:
  Enabled: true

# Checks that there are no repeated patterns used in `in` keywords.
Lint/DuplicateMatchPattern:
  Enabled: true

# Checks for duplicated instance (or singleton) method definitions.
Lint/DuplicateMethods:
  Enabled: true

# Checks for duplicate elements in Regexp character classes.
Lint/DuplicateRegexpCharacterClassElement:
  Enabled: true

# Checks for duplicate `require`s and `require_relative`s.
Lint/DuplicateRequire:
  Enabled: true

# Checks that there are no repeated exceptions used in `rescue` expressions.
Lint/DuplicateRescueException:
  Enabled: true

# Checks if `each_with_object` is called with an immutable argument.
Lint/EachWithObjectArgument:
  Enabled: true

# Checks for odd `else` block layout - like having an expression on the same line as the else keyword.
Lint/ElseLayout:
  Enabled: true

# Checks for blocks without a body.
# NOTE: Empty lambdas and procs are ignored by default.
Lint/EmptyBlock:
  Enabled: true

# Checks for classes and metaclasses without a body.
Lint/EmptyClass:
  Enabled: true

# Checks for the presence of `if`, `elsif` and `unless` branches without a body.
Lint/EmptyConditionalBody:
  Enabled: true

# Checks for empty `ensure` blocks.
Lint/EmptyEnsure:
  Enabled: true

# Checks for the presence of empty expressions.
Lint/EmptyExpression:
  Enabled: true

# Enforces that Ruby source files are not empty.
Lint/EmptyFile:
  Enabled: true

# Checks for the presence of `in` pattern branches without a body.
Lint/EmptyInPattern:
  Enabled: true

# Checks for empty interpolation.
Lint/EmptyInterpolation:
  Enabled: true

# hecks for the presence of `when` branches without a body.
Lint/EmptyWhen:
  Enabled: true

# Checks for `return` from an `ensure` block.
# NOTE: `return` from an `ensure` block is a dangerous code smell as it will take precedence over any exception being
# raised, and the exception will be silently thrown away as if it were rescued.
Lint/EnsureReturn:
  Enabled: true

# ## DISABLED
# # Emulates warnings in Ruby 2.6.
# Lint/ErbNewArguments:
#   Enabled: true

# Looks for uses of flip-flop operator based on the Ruby Style Guide.
# NOTE: See more about ir on https://en.wikipedia.org/wiki/Flip-flop_(programming).
Lint/FlipFlop:
  Enabled: true

# Use `x.to_d == 0.1.to_d` instead of `x == 0.1`.
Lint/FloatComparison:
  Enabled: true

# Identifies Float literals which are, like, really really really really really really really really big.
Lint/FloatOutOfRange:
  Enabled: true

# Checks if there is a mismatch between the number of expected fields for format/sprintf/#%.
Lint/FormatParameterMismatch:
  Enabled: true

# Prefer using `Hash#compare_by_identity` than using `object_id` for keys.
Lint/HashCompareByIdentity:
  Enabled: true

## DISABLED
# # Checks for the ordering of a method call where the receiver of the call is a HEREDOC.
# Lint/HeredocMethodCallPosition:
#   Enabled: false

# Use `foo.equal?(bar)` instead of `foo.object_id == bar.object_id`.
Lint/IdentityComparison:
  Enabled: true

# Checks for implicit string concatenation of string literals which are on the same line.
Lint/ImplicitStringConcatenation:
  Enabled: true

# ## DISABLED
# # Checks for `IO.select` that is incompatible with Fiber Scheduler since Ruby 3.0.
# Lint/IncompatibleIoSelectWithFiberScheduler:
#   Enabled: true

# Checks for private or protected access modifiers which are applied to a singleton method.
# NOTE: These access modifiers do not make singleton methods private/protected. `private_class_method` can be used for
#       that or:
#       class C
#         class << self
#           private
#
#           def singleton_private_method 
#           ...
Lint/IneffectiveAccessModifier:
  Enabled: true

# iLooks for error classes inheriting from `Exception`.
Lint/InheritException:
  Enabled: true

## DISABLED
# # Use `"bar #{foo}"` instead of `'bar #{foo}'`.
# # NOTE: This is ignored if Style/StringLiterals is enabled with double_quotes.
# Lint/InterpolationCheck:
#   Enabled: true

## DISABLED
# # Emulates Ruby warning for `it` calls without arguments in Ruby 3.3.
# Lint/ItWithoutArgumentsInBlock:
#   Enabled: true

# Checks uses of lambda without a literal block.
Lint/LambdaWithoutLiteralBlock:
  Enabled: true

# Checks for literals used as the conditions or as operands in `and`/`or` expressions serving as the conditions of
# `if`/`while`/`until`/`case-when`/`case-in`.
Lint/LiteralAsCondition:
  Enabled: true

# Checks for literal assignments in the conditions of `if`, `while`, and `until`.
Lint/LiteralAssignmentInCondition:
  Enabled: true

# Checks for interpolated literals.
Lint/LiteralInInterpolation:
  Enabled: true

# Checks for uses of `begin ... end` with `while`/`until` and some condition.
Lint/Loop:
  Enabled: true

# Checks that there is an `# rubocop:enable ...` statement after a `# rubocop:disable ...` statement.
Lint/MissingCopEnableDirective:
  Enabled: true

# Checks for the presence of constructors and lifecycle callbacks without calls to `super`.
Lint/MissingSuper:
  Enabled: true

## DISABLED
# # Use `/[A-Za-z]/` instead of `/[A-z]/`.
# Lint/MixedCaseRange:
#   Enabled: true

# Do not mix named captures and numbered captures in a Regexp literal because numbered capture is ignored if they’re
# mixed.
Lint/MixedRegexpCaptureTypes:
  Enabled: true

# Use `10 <= x && x <= 20` instead of `10 <= x <= 20`.
Lint/MultipleComparison:
  Enabled: true

# Checks for nested method definitions.
Lint/NestedMethodDefinition:
  Enabled: true

# Checks for nested percent literals.
Lint/NestedPercentLiteral:
  Enabled: true

# Don’t omit the accumulator when calling `next` in a `reduce` block.
Lint/NextWithoutAccumulator:
  Enabled: true

# Checks for the presence of a `return` inside a `begin..end` block in assignment contexts.
Lint/NoReturnInBeginEndBlocks:
  Enabled: true

## DISABLED
# # Checks for non-atomic file operation. And then replace it with a nearly equivalent and atomic method.
# Lint/NonAtomicFileOperation:
#   Enabled: true

## DISABLED
# # `Dir[...]` and `Dir.glob(...)` do not make any guarantees about the order in which files are returned.
# # NOTE: This cop will be deprecated and removed when supporting only Ruby 3.0 and higher.
# Lint/NonDeterministicRequireOrder:
#   Enabled: true

# Checks for non-local exits from iterators without a return value.
Lint/NonLocalExitFromIterator:
  Enabled: true

## DISABLED
# # Warns the usage of unsafe number conversions. Unsafe number conversion can cause unexpected error if auto type conversion fails.
# # Cop prefer parsing with number class instead.
# Lint/NumberConversion:
#   Enabled: false

# Use `non_numbered_parameter_name = :value` instead of `_1 = :value`.
Lint/NumberedParameterAssignment:
  Enabled: true

# Checks for unintended or-assignment to a constant.
Lint/OrAssignmentToConstant:
  Enabled: true

# Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.
Lint/OrderedMagicComments:
  Enabled: true

## DISABLED
# # Looks for references of Regexp captures that are out of range and thus always returns `nil`.
# Lint/OutOfRangeRegexpRef:
#   Enabled: true

# Checks for space between the name of a called method and a left parenthesis.
Lint/ParenthesesAsGroupedExpression:
  Enabled: true

# Checks for quotes and commas in %w.
Lint/PercentStringArray:
  Enabled: true

# Checks for colons and commas in %i.
Lint/PercentSymbolArray:
  Enabled: true

# Checks for `raise` or `fail` statements which are raising `Exception` class.
Lint/RaiseException:
  Enabled: true

# Checks for `rand(1)` calls. Such calls always return 0.
Lint/RandOne:
  Enabled: true

# Detects instances of rubocop:disable comments that can be removed without causing any offenses to be reported.
Lint/RedundantCopDisableDirective:
  Enabled: true

# Detects instances of rubocop:enable comments that can be removed.
Lint/RedundantCopEnableDirective:
  Enabled: true

## DISABLED
# # Checks for redundant sort method to `Dir.glob` and `Dir[]`.
# Lint/RedundantDirGlobSort:
#   Enabled: true

# Checks for redundant quantifiers inside Regexp literals.
Lint/RedundantRegexpQuantifiers:
  Enabled: true

# Checks for unnecessary `require` statement.
Lint/RedundantRequireStatement:
  Enabled: true

# Checks for redundant safe navigation `&.` calls.
Lint/RedundantSafeNavigation:
  Enabled: true

# Checks for unneeded usages of splat expansion.
Lint/RedundantSplatExpansion:
  Enabled: true

# Checks for string conversion in string interpolation, `print`, `puts`, and `warn` arguments, which is redundant.
Lint/RedundantStringCoercion:
  Enabled: true

# Checks for redundant `with_index`.
Lint/RedundantWithIndex:
  Enabled: true

# Checks for redundant `with_object`.
Lint/RedundantWithObject:
  Enabled: true

## DISABLED
# # Checks if `include` or `prepend` is called in `refine` block.
# Lint/RefinementImportMethods:
#   Enabled: true

# Checks for regexp literals used as match-current-line.
# NOTE: If a regexp literal is in condition, the regexp matches `$_` implicitly.
Lint/RegexpAsCondition:
  Enabled: true

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

# Checks that a range literal is enclosed in parentheses when the end of the range is at a line break.
Lint/RequireRangeParentheses:
  Enabled: true

# Checks for uses a file requiring itself with `require_relative`.
Lint/RequireRelativeSelfPath:
  Enabled: true

# Checks for `rescue` blocks targeting the `Exception` class.
Lint/RescueException:
  Enabled: true

# Check for arguments to `rescue` that will result in a `TypeError` if an exception is raised.
Lint/RescueType:
  Enabled: true

# Checks for the use of a `return` with a value in a context where the value will be ignored.
Lint/ReturnInVoidContext:
  Enabled: true

# Use `x&.foo&.bar` instead of `x&.foo.bar`.
Lint/SafeNavigationChain:
  Enabled: true

# Check to make sure that if safe navigation is used for a method call in an `&&` or `||` condition that safe
# navigation is used for all method calls on that same object.
Lint/SafeNavigationConsistency:
  Enabled: true

# Checks to make sure safe navigation isn’t used with `empty?` in a conditional.
Lint/SafeNavigationWithEmpty:
  Enabled: true

# Checks if a file which has a shebang line as its first line is granted execute permission.
Lint/ScriptPermission:
  Enabled: true

# Avoid things like `foo, bar = foo, bar`
Lint/SelfAssignment:
  Enabled: true

# Checks for `send`, `public_send`, and `send` methods when using mix-in like `Foo.send(:include, Bar)`.
Lint/SendWithMixinArgument:
  Enabled: true

# Checks for shadowed arguments (like assignment in the body).
Lint/ShadowedArgument:
  Enabled: true

# Checks for a rescued exception that get shadowed by a less specific exception being rescued before a more specific
# exception is rescued.
Lint/ShadowedException:
  Enabled: true

# Checks for the use of local variable names from an outer scope in block arguments or block-local variables.
Lint/ShadowingOuterLocalVariable:
  Enabled: true

# Checks unexpected overrides of the `Struct` built-in methods via `Struct.new`.
Lint/StructNewOverride:
  Enabled: true

# Checks for `rescue` blocks with no body.
Lint/SuppressedException:
  Enabled: true

# Checks for uses of literal strings converted to a symbol where a literal symbol could be used instead.
Lint/SymbolConversion:
  Enabled: true

# Repacks Parser’s diagnostics/errors into RuboCop’s offenses.
Lint/Syntax:
  Enabled: true

# Ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments.
Lint/ToEnumArguments:
  Enabled: true

# Checks to make sure `#to_json` includes an optional argument.
# When overriding `#to_json`, callers may invoke JSON generation via `JSON.generate(your_obj)`.
Lint/ToJSON:
  Enabled: true

# Checks for top level return with arguments.
Lint/TopLevelReturnWithArgument:
  Enabled: true

# Checks for trailing commas in attribute declarations, such as `#attr_reader`.
Lint/TrailingCommaInAttributeDeclaration:
  Enabled: true

# Checks for "triple quotes" (strings delimited by any odd number of quotes greater than 1).
Lint/TripleQuotes:
  Enabled: true

# Checks for underscore-prefixed variables that are actually used.
Lint/UnderscorePrefixedVariableName:
  Enabled: true

# Checks for a block that is known to need more positional block arguments than are given.
Lint/UnexpectedBlockArity:
  Enabled: true

# Checks for using Fixnum or Bignum constant.
Lint/UnifiedInteger:
  Enabled: true

# Looks for `reduce` or `inject` blocks where the value returned (implicitly or explicitly) does not include the
# accumulator.
Lint/UnmodifiedReduceAccumulator:
  Enabled: true

# Checks for unreachable code. The check are based on the presence of flow of control statement in non-final position
# in `begin` (implicit) blocks.
Lint/UnreachableCode:
  Enabled: true

# Checks for loops that will have at most one iteration.
Lint/UnreachableLoop:
  Enabled: true

# Checks for unused block arguments.
Lint/UnusedBlockArgument:
  Enabled: true

# Checks for unused method arguments.
Lint/UnusedMethodArgument:
  Enabled: true

# Identifies places where `URI.escape` can be replaced by `CGI.escape`, `URI.encode_www_form`, or
# `URI.encode_www_form_component`.
Lint/UriEscapeUnescape:
  Enabled: true

# Identifies places where `URI.regexp` is obsolete and should not be used
Lint/UriRegexp:
  Enabled: true

# Checks for redundant access modifiers, including those with no code, those which are repeated, and leading public
# modifiers in a class or module body
Lint/UselessAccessModifier:
  Enabled: true

# Checks for every useless assignment to local variable in every scope.
Lint/UselessAssignment:
  Enabled: true

# Checks for useless `else` in `begin..end` without `rescue`.
# NOTE: This syntax is no longer valid on Ruby 2.6 or higher.
Lint/UselessElseWithoutRescue:
  Enabled: true

# Checks for useless method definitions, specifically: empty constructors and methods just delegating to `super`.
Lint/UselessMethodDefinition:
  Enabled: true

# Checks for useless `rescue`s, which only reraise rescued exceptions.
Lint/UselessRescue:
  Enabled: true

# Looks for `ruby2_keywords` calls for methods that do not need it.
Lint/UselessRuby2Keywords:
  Enabled: true

# Checks for setter call to local variable as the final expression of a function definition.
Lint/UselessSetterCall:
  Enabled: true

# Checks for uses of `Integer#times` that will never yield (`0.times`) or that will only ever yield once (`1.times`).
Lint/UselessTimes:
  Enabled: true

# Checks for operators, variables, literals, lambda, proc and nonmutating methods used in void context.
Lint/Void:
  Enabled: true
