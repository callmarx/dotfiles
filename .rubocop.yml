# Configuration inspired by https://github.com/rails/rails/blob/main/.rubocop.yml

require:
  - rubocop-packaging
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec

AllCops:
  TargetRubyVersion: 3.2.2
  # RuboCop has a bunch of cops enabled by default. This setting tells RuboCop
  # to ignore them, so only the ones explicitly set in this file are enabled.
  DisabledByDefault: true
  SuggestExtensions: false
  Exclude:
    - '**/tmp/**/*'
    - '**/vendor/**/*'
    - db/**/*
    - config/**/*
    - lib/tasks/**/*
    - bin/*


Performance:
  Exclude:
    - spec/**/*

Rails/IndexBy:
  Enabled: true

Rails/IndexWith:
  Enabled: true

# A Gemâ€™s requirements should be listed only once in a Gemfile.
Bundler/DuplicatedGem:
  Enabled: true

# A Gem group, or a set of groups, should be listed only once in a Gemfile.
Bundler/DuplicatedGroup:
  Enabled: true

# Each gem in the Gemfile should have a comment explaining its purpose in the project.
Bundler/GemComment:
  Enabled: true

# Verifies that a project contains Gemfile and Gemfile.lock
Bundler/GemFilename:
  Enabled: true

# Enforce that Gem version specifications or a commit reference (branch, ref, or tag) are either required or forbidden.
Bundler/GemVersion:
  Enabled: true

# Passing symbol arguments to source (e.g. source :rubygems) is deprecated because they default to using HTTP requests.
Bundler/InsecureProtocolSource:
  Enabled: true

# Gems should be alphabetically sorted within groups.
Bundler/OrderedGems:
  Enabled: true

# Bare access modifiers should be indented as deep as method definitions, or as deep as the class/module keyword.
Layout/AccessModifierIndentation:
  Enabled: true

# Checks if the arguments on a multi-line method definition are aligned.
Layout/ArgumentAlignment:
  Enabled: true

# Checks if the elements of a multi-line array literal are aligned.
Layout/ArrayAlignment:
  Enabled: true

# Checks the indentation of the first line of the right-hand-side of a multi-line assignment.
Layout/AssignmentIndentation:
  Enabled: true

# Checks whether the end keyword of begin is aligned properly.
Layout/BeginEndAlignment:
  Enabled: true

# Checks whether the end keywords are aligned properly for do end blocks.
Layout/BlockAlignment:
  Enabled: true

# Checks whether the end statement of a do..end block is on its own line.
Layout/BlockEndNewline:
  Enabled: true

# Checks how the when and ins of a case expression are indented in relation to its case or end keyword.
Layout/CaseIndentation:
  Enabled: true

# Checks if the code style follows the ExpectedOrder configuration
Layout/ClassStructure:
  Enabled: true
  ExpectedOrder:
   - module_inclusion
   - constants
   - association
   - public_attribute_macros
   - public_delegate
   - macros
   - public_class_methods
   - initializer
   - public_methods
   - protected_attribute_macros
   - protected_methods
   - private_attribute_macros
   - private_delegate
   - private_methods

# Checks the indentation of here document closings.
Layout/ClosingHeredocIndentation:
  Enabled: true

# Checks the indentation of hanging closing parentheses in method calls, method definitions, and grouped expressions.
Layout/ClosingParenthesisIndentation:
  Enabled: true

# Checks the indentation of comments.
Layout/CommentIndentation:
  Enabled: true

# Checks for conditions that are not on the same line as if/while/until.
Layout/ConditionPosition:
  Enabled: true

# Checks whether the end keywords of method definitions are aligned properly.
Layout/DefEndAlignment:
  Enabled: true

# Checks the . position in multi-line method calls.
Layout/DotPosition:
  Enabled: true

# Checks the alignment of else keywords.
Layout/ElseAlignment:
  Enabled: true

# Checks empty comment.
Layout/EmptyComment:
  Enabled: true
  AllowBorderComment: true
  AllowMarginComment: true

# Enforces empty line after guard clause.
Layout/EmptyLineAfterGuardClause:
  Enabled: true

# Checks for a newline after the final magic comment (after "# frozen_string_literal: true" line).
Layout/EmptyLineAfterMagicComment:
  Enabled: true

## DISABLED
# # Enforces empty line after multiline condition.
# Layout/EmptyLineAfterMultilineCondition:
#   Enabled: false

# Checks whether class/module/method definitions are separated by one or more empty lines.
Layout/EmptyLineBetweenDefs:
  Enabled: true

# Checks for two or more consecutive blank lines.
Layout/EmptyLines:
  Enabled: true

# Access modifiers should be surrounded by blank lines (in this case only before). 
Layout/EmptyLinesAroundAccessModifier:
  Enabled: true
  EnforcedStyle: only_before

# Checks if empty lines exist around the arguments of a method invocation.
Layout/EmptyLinesAroundArguments:
  Enabled: true

# Checks for a newline after an attribute accessor or a group of them
Layout/EmptyLinesAroundAttributeAccessor:
  Enabled: true

# Checks if empty lines exist around the bodies of begin-end blocks.
Layout/EmptyLinesAroundBeginBody:
  Enabled: true

# Checks if empty lines around the bodies of blocks match the configuration.
Layout/EmptyLinesAroundBlockBody:
  Enabled: true

# In a regular class definition, no empty lines around the body.
Layout/EmptyLinesAroundClassBody:
  Enabled: true

# Checks if empty lines exist around the bodies of begin sections.
Layout/EmptyLinesAroundExceptionHandlingKeywords:
  Enabled: true

# In a regular method definition, no empty lines around the body.
Layout/EmptyLinesAroundMethodBody:
  Enabled: true

# In a regular module definition, no empty lines around the body.
Layout/EmptyLinesAroundModuleBody:
  Enabled: true

# Align `end` with the matching keyword or starting expression except for assignments.
Layout/EndAlignment:
  Enabled: true
  EnforcedStyleAlignWith: variable
  AutoCorrect: true

# Checks for Windows-style line endings in the source code.
Layout/EndOfLine:
  Enabled: true

# Checks for extra/unnecessary whitespace.
Layout/ExtraSpacing:
  Enabled: true

# Checks the indentation of the first argument in a method call.
# Arguments after the first one are checked by Layout/ArgumentAlignment.
Layout/FirstArgumentIndentation:
  Enabled: true

# Checks the indentation of the first element in an array literal where the opening bracket and the first element are
# on separate lines.
# NOTE: The other elements' indentations are handled by Layout/ArrayAlignment cop.
Layout/FirstArrayElementIndentation:
  Enabled: true

## DISABLED
# # Checks for a line break before the first element in a multi-line array.
# Layout/FirstArrayElementLineBreak:
#   Enabled: false

# Checks the indentation of the first key in a hash literal where the opening brace and the first key are on separate
# lines.
# NOTE: The other keys' indentations are handled by the HashAlignment.
Layout/FirstHashElementIndentation:
  Enabled: true

## DISABLED
# # Checks for a line break before the first element in a multi-line hash.
# Layout/FirstHashElementLineBreak:
#   Enabled: true

# Checks for a line break before the first argument in a multi-line method call.
Layout/FirstMethodArgumentLineBreak:
  Enabled: true

# Checks for a line break before the first parameter in a multi-line method parameter definition.
Layout/FirstMethodParameterLineBreak:
  Enabled: true

# Checks the indentation of the first parameter in a method definition.
# Parameters after the first one are checked by Layout/ParameterAlignment
Layout/FirstParameterIndentation:
  Enabled: true

# Check that the keys, separators, and values of a multi-line hash literal are aligned according to configuration.
# * key: left align keys, one space before hash rockets and values.
# * always_inspect:  Inspect both implicit and explicit hashes.
Layout/HashAlignment:
  Enabled: true
  ## DEAFULT VALUES:
  # EnforcedHashRocketStyle: key
  # EnforcedColonStyle: key
  # EnforcedLastArgumentHashStyle: always_inspect

# Checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument.
Layout/HeredocArgumentClosingParenthesis:
  Enabled: true

# Checks the indentation of the here document bodies.
Layout/HeredocIndentation:
  Enabled: true

# Method definitions after `private` or `protected` isolated calls need one extra level of indentation.
Layout/IndentationConsistency:
  Enabled: true
  EnforcedStyle: indented_internal_methods

# No tabs for indentation.
Layout/IndentationStyle:
  Enabled: true

# Two spaces for indentation.
Layout/IndentationWidth:
  Enabled: true

# Checks for indentation of the first non-blank non-comment line in a file.
Layout/InitialIndentation:
  Enabled: true

# Checks whether comments have a leading space after the denoting the start of the comment
Layout/LeadingCommentSpace:
  Enabled: true

# Checks for unnecessary leading blank lines at the beginning of a file. 
Layout/LeadingEmptyLines:
  Enabled: true

# Checks that strings broken over multiple lines contain trailing spaces instead of leading spaces. 
Layout/LineContinuationLeadingSpace:
  Enabled: true

# Checks that the backslash of a line continuation is separated from preceding text by exactly one space.
Layout/LineContinuationSpacing:
  Enabled: true

# Checks the indentation of the next line after a line that ends with a string literal and a backslash.
Layout/LineEndStringConcatenationIndentation:
  Enabled: true

# Checks the length of lines in the source code. Max: 120 (deafult).
Layout/LineLength:
  Enabled: true

# Checks that the closing brace in an array literal is either on the same line as the last array element.
Layout/MultilineArrayBraceLayout:
  Enabled: true

# Ensures that each item in a multi-line array starts on a separate line.
Layout/MultilineArrayLineBreaks:
  Enabled: true

# Checks whether the multiline assignments have a newline after the assignment operator.
Layout/MultilineAssignmentLayout:
  Enabled: true

# Checks whether the multiline do end blocks have a newline after the start of the block.
Layout/MultilineBlockLayout:
  Enabled: true

# Checks that the closing brace in a hash literal is either on the same line as the last hash element.
Layout/MultilineHashBraceLayout:
  Enabled: true

# Ensures that each key in a multi-line hash starts on a separate line.
Layout/MultilineHashKeyLineBreaks:
  Enabled: true

# Ensures that each argument in a multi-line method call starts on a separate line.
Layout/MultilineMethodArgumentLineBreaks:
  Enabled: true

# Checks that the closing brace in a method call is either on the same line as the last method argument.
Layout/MultilineMethodCallBraceLayout:
  Enabled: true

# Checks the indentation of the method name part in method calls that span more than one line.
Layout/MultilineMethodCallIndentation:
  Enabled: true

# Checks that the closing brace in a method definition is either on the same line as the last method parameter.
Layout/MultilineMethodDefinitionBraceLayout:
  Enabled: true

# Ensures that each parameter in a multi-line method definition starts on a separate line.
Layout/MultilineMethodParameterLineBreaks:
  Enabled: true

# Checks the indentation of the right hand side operand in binary operations that span more than one line.
Layout/MultilineOperationIndentation:
  Enabled: true

# Checks if the parameters on a multi-line method call or definition are aligned.
Layout/ParameterAlignment:
  Enabled: true

# Checks whether certain expressions, e.g. method calls, that could fit completely on a single line, are broken up
# into multiple lines unnecessarily
Layout/RedundantLineBreak:
  Enabled: true

# Checks whether the rescue and ensure keywords are aligned properly.
Layout/RescueEnsureAlignment:
  Enabled: true

# Checks if method calls are chained onto single line blocks. It considers that a line break before the dot improves
# the readability of the code.
Layout/SingleLineBlockChain:
  Enabled: true
  Exclude:
    - spec/**/*

# Use `def f(a:, b: 2); {a: 3}; end` instead of `def f(a:, b:2); {a:3}; end`.
Layout/SpaceAfterColon:
  Enabled: true

# Use `{ foo:bar, }` instead of `{ foo:bar,}`.
Layout/SpaceAfterComma:
  Enabled: true

# Use `def method=(y) end` instead of `def method= (y) end`.
Layout/SpaceAfterMethodName:
  Enabled: true

# Use `!something` instead of `! something`.
Layout/SpaceAfterNot:
  Enabled: true

# Use `x = 1; y = 2` instead of `x = 1;y = 2`.
Layout/SpaceAfterSemicolon:
  Enabled: true

# Checks the spacing inside and after block parameters pipes.
# NOTE: Line breaks inside parameter pipes are checked by Layout/MultilineBlockLayout and not by this cop.
Layout/SpaceAroundBlockParameters:
  Enabled: true

# Use `def some_method(arg1 = :default, arg2 = nil, arg3 = []) ... end` instead of
# `def some_method(arg1=:default, arg2=nil, arg3=[]) ... end`.
Layout/SpaceAroundEqualsInParameterDefault:
  Enabled: true

# Use `something = 123 if test` instead of `something = 123if test`.
Layout/SpaceAroundKeyword:
  Enabled: true

# Use `foo.bar` instead of `foo. bar`.
Layout/SpaceAroundMethodCallOperator:
  Enabled: true

# Use `total = 3 * 4` instead of `total = 3*4`.
Layout/SpaceAroundOperators:
  Enabled: true

# Use `foo {}` not `foo{}`.
Layout/SpaceBeforeBlockBraces:
  Enabled: true

# Use `collection[index_or_key]` instead of `collection [index_or_key]`.
Layout/SpaceBeforeBrackets:
  Enabled: true

# Use `[1, 2, 3]` instead of `[1 , 2 , 3]`.
Layout/SpaceBeforeComma:
  Enabled: true

# Use `1 + 1 # some comment...` instead of `1 + 1 #some comment...`.
Layout/SpaceBeforeComment:
  Enabled: true

# Use `something "hello"` instead of `something"hello"`.
# NOTE: This is ignored if Style/MethodCallWithArgsParentheses is enabled.
Layout/SpaceBeforeFirstArg:
  Enabled: true

# Use `x = 1; y = 2` instead of `x = 1 ; y = 2`.
Layout/SpaceBeforeSemicolon:
  Enabled: true

# Use `a = ->(x, y) { x + y }` instead of `a = -> (x, y) { x + y }`.
Layout/SpaceInLambdaLiteral:
  Enabled: true

# Use `array = [a, b, c]` instead of `array = [ a, b, c ]`.
Layout/SpaceInsideArrayLiteralBrackets:
  Enabled: true

# Checks for unnecessary additional spaces inside array percent literals (i.e. %i/%w).
Layout/SpaceInsideArrayPercentLiteral:
  Enabled: true

# Use `foo { bar }` not `foo {bar}`.
Layout/SpaceInsideBlockBraces:
  Enabled: true
  EnforcedStyleForEmptyBraces: space

# Use `{ a: 1 }` not `{a:1}`.
Layout/SpaceInsideHashLiteralBraces:
  Enabled: true

# Use `g = (a + 3)` instead of `g = (a + 3 )`.
Layout/SpaceInsideParens:
  Enabled: true

# Use `%i(foo bar baz)` instead of `%i( foo bar baz )`.
Layout/SpaceInsidePercentLiteralDelimiters:
  Enabled: true

# Use `1..5` instead of `1 .. 5`.
Layout/SpaceInsideRangeLiteral:
  Enabled: true

# Use `hash[:key]` instead of `hash[ :key ]`.
Layout/SpaceInsideReferenceBrackets:
  Enabled: true

# Use `"Hello #{name}!"` instead of `Hello #{ name }!"`.
Layout/SpaceInsideStringInterpolation:
  Enabled: true

# Empty lines should not have any spaces.
Layout/TrailingEmptyLines:
  Enabled: true

# No trailing whitespace.
Layout/TrailingWhitespace:
  Enabled: true

# Use `x -= y` instead of `x =- y`.
Lint/AmbiguousAssignment:
  Enabled: true

# Use `some_method(a) { |val| puts val }` instead of `some_method a { |val| puts val }`.
Lint/AmbiguousBlockAssociation:
  Enabled: true

# Use `do_something(*some_array)` instead of `do_something *some_array`.
# NOTE: This is ignored if Style/MethodCallWithArgsParentheses is enabled.
Lint/AmbiguousOperator:
  Enabled: true

# Use `a + (b * c)` instead of `a + b * c`.
Lint/AmbiguousOperatorPrecedence:
  Enabled: true

# Use `(1..2).to_a` instead of `1..2.to_a`.
Lint/AmbiguousRange:
  Enabled: true

# Use `do_something(/pattern/i)` instead of `do_something /pattern/i`.
Lint/AmbiguousRegexpLiteral:
  Enabled: true

# Use `if (some_var = value)` instead of `if some_var = value`.
Lint/AssignmentInCondition:
  Enabled: true

# BigDecimal.new() is deprecated since BigDecimal 1.3.3.
Lint/BigDecimalNew:
  Enabled: true

# Check for bad uses like `if a.x != 0 && a.x != 0`.
Lint/BinaryOperatorWithIdenticalOperands:
  Enabled: true

# Use `true` instead of `:true`.
Lint/BooleanSymbol:
  Enabled: true

# Use `def bake(pie:) ... end` instead of `def bake(pie: pie) ... end`.
Lint/CircularArgumentReference:
  Enabled: true

# Do not define constants within a block. 
Lint/ConstantDefinitionInBlock:
  Enabled: true

# Checks for overwriting an exception with an exception result by use rescue â‡’.
Lint/ConstantOverwrittenInRescue:
  Enabled: true

## DISABLED
# # Check that certain constants are fully qualified.
# # NOTE: This is not enabled by default because it would mark a lot of offenses unnecessarily.
# Lint/ConstantResolution:
#   Enabled: false

# Checks for debug calls (such as `debugger` or `binding.pry`) that should not be kept for production code.
Lint/Debugger:
  Enabled: true

# Checks for uses of the deprecated class method usages.
Lint/DeprecatedClassMethods:
  Enabled: true

# Checks for deprecated constants.
Lint/DeprecatedConstants:
  Enabled: true

# Checks for algorithmic constants for OpenSSL::Cipher and OpenSSL::Digest deprecated since OpenSSL version 2.2.0.
Lint/DeprecatedOpenSSLConstant:
  Enabled: true

# ## DISABLED
# # Checks constructors for disjunctive assignments (||=) that should be plain assignments.
# # NOTE: This cop is unsafe because it can register a false positive when a method is redefined in a subclass that
# # calls super.
# Lint/DisjunctiveAssignmentInConstructor:
#   Enabled: true

# Checks that there are no repeated bodies within if/unless, case-when, case-in and rescue constructs. 
Lint/DuplicateBranch:
  Enabled: true

# Checks that there are no repeated conditions used in case 'when' expressions.
Lint/DuplicateCaseCondition:
  Enabled: true

# Checks that there are no repeated conditions used in if 'elsif'.
Lint/DuplicateElsifCondition:
  Enabled: true

# Checks for duplicated keys in hash literals.
Lint/DuplicateHashKey:
  Enabled: true

# Checks for duplicated magic comments.
Lint/DuplicateMagicComment:
  Enabled: true

# Checks that there are no repeated patterns used in `in` keywords.
Lint/DuplicateMatchPattern:
  Enabled: true

# Checks for duplicated instance (or singleton) method definitions.
Lint/DuplicateMethods:
  Enabled: true

# Checks for duplicate elements in Regexp character classes.
Lint/DuplicateRegexpCharacterClassElement:
  Enabled: true

# Checks for duplicate `require`s and `require_relative`s.
Lint/DuplicateRequire:
  Enabled: true

# Checks that there are no repeated exceptions used in `rescue` expressions.
Lint/DuplicateRescueException:
  Enabled: true

# Checks if `each_with_object` is called with an immutable argument.
Lint/EachWithObjectArgument:
  Enabled: true

# Checks for odd `else` block layout - like having an expression on the same line as the else keyword.
Lint/ElseLayout:
  Enabled: true

# Checks for blocks without a body.
# NOTE: Empty lambdas and procs are ignored by default.
Lint/EmptyBlock:
  Enabled: true

# Checks for classes and metaclasses without a body.
Lint/EmptyClass:
  Enabled: true

# Checks for the presence of `if`, `elsif` and `unless` branches without a body.
Lint/EmptyConditionalBody:
  Enabled: true

# Checks for empty `ensure` blocks.
Lint/EmptyEnsure:
  Enabled: true

# Checks for the presence of empty expressions.
Lint/EmptyExpression:
  Enabled: true

# Enforces that Ruby source files are not empty.
Lint/EmptyFile:
  Enabled: true

# Checks for the presence of `in` pattern branches without a body.
Lint/EmptyInPattern:
  Enabled: true

# Checks for empty interpolation.
Lint/EmptyInterpolation:
  Enabled: true

# hecks for the presence of `when` branches without a body.
Lint/EmptyWhen:
  Enabled: true

# Checks for `return` from an `ensure` block.
# NOTE: `return` from an `ensure` block is a dangerous code smell as it will take precedence over any exception being
# raised, and the exception will be silently thrown away as if it were rescued.
Lint/EnsureReturn:
  Enabled: true

# ## DISABLED
# # Emulates warnings in Ruby 2.6.
# Lint/ErbNewArguments:
#   Enabled: true

# Looks for uses of flip-flop operator based on the Ruby Style Guide.
# NOTE: See more about ir on https://en.wikipedia.org/wiki/Flip-flop_(programming).
Lint/FlipFlop:
  Enabled: true

# Use `x.to_d == 0.1.to_d` instead of `x == 0.1`.
Lint/FloatComparison:
  Enabled: true

# Identifies Float literals which are, like, really really really really really really really really big.
Lint/FloatOutOfRange:
  Enabled: true

# Checks if there is a mismatch between the number of expected fields for format/sprintf/#%.
Lint/FormatParameterMismatch:
  Enabled: true

# Prefer using `Hash#compare_by_identity` than using `object_id` for keys.
Lint/HashCompareByIdentity:
  Enabled: true

## DISABLED
# # Checks for the ordering of a method call where the receiver of the call is a HEREDOC.
# Lint/HeredocMethodCallPosition:
#   Enabled: false

# Use `foo.equal?(bar)` instead of `foo.object_id == bar.object_id`.
Lint/IdentityComparison:
  Enabled: true

# Checks for implicit string concatenation of string literals which are on the same line.
Lint/ImplicitStringConcatenation:
  Enabled: true

# ## DISABLED
# # Checks for `IO.select` that is incompatible with Fiber Scheduler since Ruby 3.0.
# Lint/IncompatibleIoSelectWithFiberScheduler:
#   Enabled: true

# Checks for private or protected access modifiers which are applied to a singleton method.
# NOTE: These access modifiers do not make singleton methods private/protected. `private_class_method` can be used for
#       that or:
#       class C
#         class << self
#           private
#
#           def singleton_private_method 
#           ...
Lint/IneffectiveAccessModifier:
  Enabled: true

# iLooks for error classes inheriting from `Exception`.
Lint/InheritException:
  Enabled: true

## DISABLED
# # Use `"bar #{foo}"` instead of `'bar #{foo}'`.
# # NOTE: This is ignored if Style/StringLiterals is enabled with double_quotes.
# Lint/InterpolationCheck:
#   Enabled: true

## DISABLED
# # Emulates Ruby warning for `it` calls without arguments in Ruby 3.3.
# Lint/ItWithoutArgumentsInBlock:
#   Enabled: true

# Checks uses of lambda without a literal block.
Lint/LambdaWithoutLiteralBlock:
  Enabled: true

# Checks for literals used as the conditions or as operands in `and`/`or` expressions serving as the conditions of
# `if`/`while`/`until`/`case-when`/`case-in`.
Lint/LiteralAsCondition:
  Enabled: true

# Checks for literal assignments in the conditions of `if`, `while`, and `until`.
Lint/LiteralAssignmentInCondition:
  Enabled: true

# Checks for interpolated literals.
Lint/LiteralInInterpolation:
  Enabled: true

# Checks for uses of `begin ... end` with `while`/`until` and some condition.
Lint/Loop:
  Enabled: true

# Checks that there is an `# rubocop:enable ...` statement after a `# rubocop:disable ...` statement.
Lint/MissingCopEnableDirective:
  Enabled: true

# Checks for the presence of constructors and lifecycle callbacks without calls to `super`.
Lint/MissingSuper:
  Enabled: true

## DISABLED
# # Use `/[A-Za-z]/` instead of `/[A-z]/`.
# Lint/MixedCaseRange:
#   Enabled: true

# Do not mix named captures and numbered captures in a Regexp literal because numbered capture is ignored if theyâ€™re
# mixed.
Lint/MixedRegexpCaptureTypes:
  Enabled: true

# Use `10 <= x && x <= 20` instead of `10 <= x <= 20`.
Lint/MultipleComparison:
  Enabled: true

# Checks for nested method definitions.
Lint/NestedMethodDefinition:
  Enabled: true

# Checks for nested percent literals.
Lint/NestedPercentLiteral:
  Enabled: true

# Donâ€™t omit the accumulator when calling `next` in a `reduce` block.
Lint/NextWithoutAccumulator:
  Enabled: true

# Checks for the presence of a `return` inside a `begin..end` block in assignment contexts.
Lint/NoReturnInBeginEndBlocks:
  Enabled: true

## DISABLED
# # Checks for non-atomic file operation. And then replace it with a nearly equivalent and atomic method.
# Lint/NonAtomicFileOperation:
#   Enabled: true

## DISABLED
# # `Dir[...]` and `Dir.glob(...)` do not make any guarantees about the order in which files are returned.
# # NOTE: This cop will be deprecated and removed when supporting only Ruby 3.0 and higher.
# Lint/NonDeterministicRequireOrder:
#   Enabled: true

# Checks for non-local exits from iterators without a return value.
Lint/NonLocalExitFromIterator:
  Enabled: true

## DISABLED
# # Warns the usage of unsafe number conversions. Unsafe number conversion can cause unexpected error if auto type conversion fails.
# # Cop prefer parsing with number class instead.
# Lint/NumberConversion:
#   Enabled: false

# Use `non_numbered_parameter_name = :value` instead of `_1 = :value`.
Lint/NumberedParameterAssignment:
  Enabled: true

# Checks for unintended or-assignment to a constant.
Lint/OrAssignmentToConstant:
  Enabled: true

# Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang.
Lint/OrderedMagicComments:
  Enabled: true

## DISABLED
# # Looks for references of Regexp captures that are out of range and thus always returns `nil`.
# Lint/OutOfRangeRegexpRef:
#   Enabled: true

# Checks for space between the name of a called method and a left parenthesis.
Lint/ParenthesesAsGroupedExpression:
  Enabled: true

# Checks for quotes and commas in %w.
Lint/PercentStringArray:
  Enabled: true

# Checks for colons and commas in %i.
Lint/PercentSymbolArray:
  Enabled: true

# Checks for `raise` or `fail` statements which are raising `Exception` class.
Lint/RaiseException:
  Enabled: true

# Checks for `rand(1)` calls. Such calls always return 0.
Lint/RandOne:
  Enabled: true

# Detects instances of rubocop:disable comments that can be removed without causing any offenses to be reported.
Lint/RedundantCopDisableDirective:
  Enabled: true

# Detects instances of rubocop:enable comments that can be removed.
Lint/RedundantCopEnableDirective:
  Enabled: true

## DISABLED
# # Checks for redundant sort method to `Dir.glob` and `Dir[]`.
# Lint/RedundantDirGlobSort:
#   Enabled: true

# Checks for redundant quantifiers inside Regexp literals.
Lint/RedundantRegexpQuantifiers:
  Enabled: true

# Checks for unnecessary `require` statement.
Lint/RedundantRequireStatement:
  Enabled: true

# Checks for redundant safe navigation `&.` calls.
Lint/RedundantSafeNavigation:
  Enabled: true

# Checks for unneeded usages of splat expansion.
Lint/RedundantSplatExpansion:
  Enabled: true

# Checks for string conversion in string interpolation, `print`, `puts`, and `warn` arguments, which is redundant.
Lint/RedundantStringCoercion:
  Enabled: true

# Checks for redundant `with_index`.
Lint/RedundantWithIndex:
  Enabled: true

# Checks for redundant `with_object`.
Lint/RedundantWithObject:
  Enabled: true

## DISABLED
# # Checks if `include` or `prepend` is called in `refine` block.
# Lint/RefinementImportMethods:
#   Enabled: true

# Checks for regexp literals used as match-current-line.
# NOTE: If a regexp literal is in condition, the regexp matches `$_` implicitly.
Lint/RegexpAsCondition:
  Enabled: true

# Use my_method(my_arg) not my_method( my_arg ) or my_method my_arg.
Lint/RequireParentheses:
  Enabled: true

# Checks that a range literal is enclosed in parentheses when the end of the range is at a line break.
Lint/RequireRangeParentheses:
  Enabled: true

# Checks for uses a file requiring itself with `require_relative`.
Lint/RequireRelativeSelfPath:
  Enabled: true

# Checks for `rescue` blocks targeting the `Exception` class.
Lint/RescueException:
  Enabled: true

# Check for arguments to `rescue` that will result in a `TypeError` if an exception is raised.
Lint/RescueType:
  Enabled: true

# Checks for the use of a `return` with a value in a context where the value will be ignored.
Lint/ReturnInVoidContext:
  Enabled: true

# Use `x&.foo&.bar` instead of `x&.foo.bar`.
Lint/SafeNavigationChain:
  Enabled: true

# Check to make sure that if safe navigation is used for a method call in an `&&` or `||` condition that safe
# navigation is used for all method calls on that same object.
Lint/SafeNavigationConsistency:
  Enabled: true

# Checks to make sure safe navigation isnâ€™t used with `empty?` in a conditional.
Lint/SafeNavigationWithEmpty:
  Enabled: true

# Checks if a file which has a shebang line as its first line is granted execute permission.
Lint/ScriptPermission:
  Enabled: true

# Avoid things like `foo, bar = foo, bar`
Lint/SelfAssignment:
  Enabled: true

# Checks for `send`, `public_send`, and `send` methods when using mix-in like `Foo.send(:include, Bar)`.
Lint/SendWithMixinArgument:
  Enabled: true

# Checks for shadowed arguments (like assignment in the body).
Lint/ShadowedArgument:
  Enabled: true

# Checks for a rescued exception that get shadowed by a less specific exception being rescued before a more specific
# exception is rescued.
Lint/ShadowedException:
  Enabled: true

# Checks for the use of local variable names from an outer scope in block arguments or block-local variables.
Lint/ShadowingOuterLocalVariable:
  Enabled: true

# Checks unexpected overrides of the `Struct` built-in methods via `Struct.new`.
Lint/StructNewOverride:
  Enabled: true

# Checks for `rescue` blocks with no body.
Lint/SuppressedException:
  Enabled: true

# Checks for uses of literal strings converted to a symbol where a literal symbol could be used instead.
Lint/SymbolConversion:
  Enabled: true

# Repacks Parserâ€™s diagnostics/errors into RuboCopâ€™s offenses.
Lint/Syntax:
  Enabled: true

# Ensures that `to_enum`/`enum_for`, called for the current method, has correct arguments.
Lint/ToEnumArguments:
  Enabled: true

# Checks to make sure `#to_json` includes an optional argument.
# When overriding `#to_json`, callers may invoke JSON generation via `JSON.generate(your_obj)`.
Lint/ToJSON:
  Enabled: true

# Checks for top level return with arguments.
Lint/TopLevelReturnWithArgument:
  Enabled: true

# Checks for trailing commas in attribute declarations, such as `#attr_reader`.
Lint/TrailingCommaInAttributeDeclaration:
  Enabled: true

# Checks for "triple quotes" (strings delimited by any odd number of quotes greater than 1).
Lint/TripleQuotes:
  Enabled: true

# Checks for underscore-prefixed variables that are actually used.
Lint/UnderscorePrefixedVariableName:
  Enabled: true

# Checks for a block that is known to need more positional block arguments than are given.
Lint/UnexpectedBlockArity:
  Enabled: true

# Checks for using Fixnum or Bignum constant.
Lint/UnifiedInteger:
  Enabled: true

# Looks for `reduce` or `inject` blocks where the value returned (implicitly or explicitly) does not include the
# accumulator.
Lint/UnmodifiedReduceAccumulator:
  Enabled: true

# Checks for unreachable code. The check are based on the presence of flow of control statement in non-final position
# in `begin` (implicit) blocks.
Lint/UnreachableCode:
  Enabled: true

# Checks for loops that will have at most one iteration.
Lint/UnreachableLoop:
  Enabled: true

# Checks for unused block arguments.
Lint/UnusedBlockArgument:
  Enabled: true

# Checks for unused method arguments.
Lint/UnusedMethodArgument:
  Enabled: true

# Identifies places where `URI.escape` can be replaced by `CGI.escape`, `URI.encode_www_form`, or
# `URI.encode_www_form_component`.
Lint/UriEscapeUnescape:
  Enabled: true

# Identifies places where `URI.regexp` is obsolete and should not be used
Lint/UriRegexp:
  Enabled: true

# Checks for redundant access modifiers, including those with no code, those which are repeated, and leading public
# modifiers in a class or module body
Lint/UselessAccessModifier:
  Enabled: true

# Checks for every useless assignment to local variable in every scope.
Lint/UselessAssignment:
  Enabled: true

# Checks for useless `else` in `begin..end` without `rescue`.
# NOTE: This syntax is no longer valid on Ruby 2.6 or higher.
Lint/UselessElseWithoutRescue:
  Enabled: true

# Checks for useless method definitions, specifically: empty constructors and methods just delegating to `super`.
Lint/UselessMethodDefinition:
  Enabled: true

# Checks for useless `rescue`s, which only reraise rescued exceptions.
Lint/UselessRescue:
  Enabled: true

# Looks for `ruby2_keywords` calls for methods that do not need it.
Lint/UselessRuby2Keywords:
  Enabled: true

# Checks for setter call to local variable as the final expression of a function definition.
Lint/UselessSetterCall:
  Enabled: true

# Checks for uses of `Integer#times` that will never yield (`0.times`) or that will only ever yield once (`1.times`).
Lint/UselessTimes:
  Enabled: true

# Checks for operators, variables, literals, lambda, proc and nonmutating methods used in void context.
Lint/Void:
  Enabled: true

# Checks that the ABC size of methods is not higher than the configured maximum. The ABC size is based on assignments,
# branches (method calls), and conditions.
# See more on http://c2.com/cgi/wiki?AbcMetric and on https://en.wikipedia.org/wiki/ABC_Software_Metric.
Metrics/AbcSize:
  Enabled: true

# Checks if the length of a block exceeds some maximum value.
# NOTE: Comment lines is ignored in this Metric by default.
Metrics/BlockLength:
  Enabled: true

# Checks for excessive nesting of conditional and looping constructs.
Metrics/BlockNesting:
  Enabled: true

# Checks if the length of a class exceeds some maximum value.
# NOTE: Comment lines is ignored in this Metric by default.
Metrics/ClassLength:
  Enabled: true
  Max: 100

# Checks for literals with extremely many entries. This is indicative of configuration or data that may be better
# extracted somewhere else, like a database, fetched from an API, or read from a non-code file (CSV, JSON, YAML, etc.).
Metrics/CollectionLiteralLength:
  Enabled: true
  LengthThreshold: 250

# Checks that the cyclomatic complexity of methods. The cyclomatic complexity is the number of linearly independent
# paths through a method.
Metrics/CyclomaticComplexity:
  Enabled: true
  Max: 7

# Checks if the length of a method exceeds some maximum value.
# NOTE: Comment lines is ignored in this Metric by default.
Metrics/MethodLength:
  Enabled: true
  CountAsOne: [ array, hash, heredoc, method_call ]
  Max: 15

# Checks if the length of a module exceeds some maximum value.
# NOTE: Comment lines is ignored in this Metric by default.
Metrics/ModuleLength:
  Enabled: true
  Max: 100

# Checks for methods with too many parameters.
Metrics/ParameterLists:
  Enabled: true
  Max: 5

# Tries to produce a complexity score thatâ€™s a measure of the complexity the reader experiences when looking at a
# method.
Metrics/PerceivedComplexity:
  Enabled: true
  Max: 8

# Makes sure that accessor methods are named properly. Applies to both instance and class methods.
Naming/AccessorMethodName:
  Enabled: true

# Checks for non-ascii characters in identifier and constant names.
Naming/AsciiIdentifiers:
  Enabled: true

# Makes sure that certain binary operator methods have their sole parameter named `other`.
Naming/BinaryOperatorParameterName:
  Enabled: true

## DISABLED
# # This cop identifies places where `do_something(&block)` can be replaced by `do_something(&)`.
# # NOTE: In Ruby 3.1, anonymous block forwarding has been added.
# Naming/BlockForwarding:
#   Enabled: true

# Checks block parameter names for how descriptive they are. It is highly configurable.
Naming/BlockParameterName:
  Enabled: true
  MinNameLength: 1
  AllowNamesEndingInNumbers: true

# Checks for class and module names with an underscore in them.
Naming/ClassAndModuleCamelCase:
  Enabled: true

# Checks whether constant names are written using SCREAMING_SNAKE_CASE.
Naming/ConstantName:
  Enabled: true

# Makes sure that Ruby source files have snake_case names.
# NOTE: Ruby scripts (i.e. source files with a shebang in the first line) are ignored.
Naming/FileName:
  Enabled: true

# Checks that your heredocs are using the configured case.
# NOTE: By default it is configured to enforce uppercase heredocs.
Naming/HeredocDelimiterCase:
  Enabled: true

# Checks that your heredocs are using meaningful delimiters.
Naming/HeredocDelimiterNaming:
  Enabled: true

# Recommends the use of inclusive language instead of problematic terms.
Naming/InclusiveLanguage:
  Enabled: true

# Checks for memoized methods whose instance variable name does not match the method name.
Naming/MemoizedInstanceVariableName:
  Enabled: true

# Makes sure that all methods use the configured style (snake_case).
Naming/MethodName:
  Enabled: true

# Checks method parameter names for how descriptive they are.  It is highly configurable.
Naming/MethodParameterName:
  Enabled: true
  MinNameLength: 3
  AllowNamesEndingInNumbers: true

# Checks that predicate methods names end with a question mark and do not start with a forbidden prefix.
Naming/PredicateName:
  Enabled: true

# Makes sure that rescued exceptions variables are named as expected.
Naming/RescuedExceptionsVariableName:
  Enabled: true

# Makes sure that all variables use the configured style (snake_case).
Naming/VariableName:
  Enabled: true

# Makes sure that all numbered variables use the configured style (normalcase).
Naming/VariableNumber:
  Enabled: true

# Checks for implementations of the hash method which combine values using custom logic instead of delegating to
# `Array#hash`.
Security/CompoundHash:
  Enabled: true

# Checks for the use of `Kernel#eval` and `Binding#eval`.
Security/Eval:
  Enabled: true

# Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`, `IO.foreach`, and `IO.readlines`.
Security/IoMethods:
  Enabled: true

# Checks for the use of JSON class methods which have potential security issues.
Security/JSONLoad:
  Enabled: true

# Checks for the use of `Marshal` class methods which have potential security issues leading to remote code execution
# when loading from an untrusted source.
Security/MarshalLoad:
  Enabled: true

# Checks for the use of `Kernel#open` and `URI.open` with dynamic data.
# NOTE: `open` and `URI.open` with literal strings are not flagged by this cop.
Security/Open:
  Enabled: true

# Checks for the use of YAML class methods which have potential security issues leading to remote code execution when
# loading from an untrusted source.
# NOTE: Ruby 3.1+ (Psych 4) uses `Psych.load` as `Psych.safe_load` by default.
Security/YAMLLoad:
  Enabled: true

# Access modifiers should be declared to apply to a group of methods.
Style/AccessModifierDeclarations:
  Enabled: true

# Checks for grouping of accessors in class and module bodies.
Style/AccessorGrouping:
  Enabled: true

# Enforces the use of `#alias`.
Style/Alias:
  Enabled: true

# Prefer &&/|| over and/or.
Style/AndOr:
  Enabled: true

## DISABLED
# # This cop identifies places where `do_something(*args, &block)` can be replaced by `do_something(...)`.
# Style/ArgumentsForwarding:
#   Enabled: true

## DISABLED
# # Enforces the use of `Array()` instead of explicit `Array` check or `[*var]`.
# # The cop is disabled by default due to safety concerns.
# Style/ArrayCoercion:
#   Enabled: false

# Identifies usages of `arr[0]` and `arr[-1]` and suggests to change them to use `arr.first` and `arr.last instead.
# The cop is disabled by default due to safety concerns.
Style/ArrayFirstLast:
  Enabled: true

# This cop identifies places where `(array1 & array2).any?` can be replaced by `array1.intersect?(array2)`.
# NOTE: In Ruby 3.1, Array#intersect? has been added.
Style/ArrayIntersect:
  Enabled: true

# Use `%w(foo bar baz).join(",")` instead of `%w(foo bar baz) * ","`.
Style/ArrayJoin:
  Enabled: true

## DISABLED
# # Checks for non-ascii (non-English) characters in comments
# Style/AsciiComments:
#   Enabled: false

# Checks for uses of `Module#attr`. Use `attr_accessor`/`attr_reader` instead.
Style/Attr:
  Enabled: true

## DISABLED
# # Checks for cases when you could use a block accepting version of a method that does automatic resource cleanup.
# Style/AutoResourceCleanup:
#   Enabled: false

# Checks if usage of %() or %{}
Style/BarePercentLiterals:
  Enabled: true

# Checks for BEGIN blocks.
Style/BeginBlock:
  Enabled: true

# Checks for places where `attr_reader` and `attr_writer` for the same method can be combined into single
# `attr_accessor`.
Style/BisectedAttrAccessor:
  Enabled: true

# Looks for uses of block comments (`=begin... =end`).
Style/BlockComments:
  Enabled: true

# Check for uses of braces or `do`/`end` around single line or multi-line blocks.
Style/BlockDelimiters:
  Enabled: true

# Use `(1..100).include?(7)` instead of `(1..100) === 7`.
Style/CaseEquality:
  Enabled: true

# Identifies places where if-elsif constructions can be replaced with case-when.
Style/CaseLikeIf:
  Enabled: true

# Use `"x"` instead of `?x`.
Style/CharacterLiteral:
  Enabled: true

# Checks the style of children definitions at classes and modules.
Style/ClassAndModuleChildren:
  Enabled: true

# Enforces consistent use of `Object#is_a?`.
Style/ClassCheck:
  Enabled: true

# Enforces the use of `Object#instance_of?` instead of class comparison for equality. `==`, `equal?`, and `eql?`.
Style/ClassEqualityComparison:
  Enabled: true

# Checks for uses of the class/module name instead of self, when defining class/module methods.
Style/ClassMethods:
  Enabled: true

# Enforces using `class << self` to define class methods
Style/ClassMethodsDefinitions:
  Enabled: true
  EnforcedStyle: self_class

# Checks for uses of class variables.
Style/ClassVars:
  Enabled: true

# Checks for places where custom logic on rejection nils from arrays and hashes can be replaced with
# `{Array,Hash}#{compact,compact!}`.
Style/CollectionCompact:
  Enabled: true

## DISABLED
# # Enforces the use of consistent method names from the Enumerable module.
# Style/CollectionMethods:
#   Enabled: false

# Use `Foo.method` instead of `Foo::method`.
Style/ColonMethodCall:
  Enabled: true

# Use `def self.method... end` instead of `def self::method... end`.
Style/ColonMethodDefinition:
  Enabled: true

# Checks for places where multiple consecutive loops over the same data can be combined into a single loop.
Style/CombinableLoops:
  Enabled: true

# Enforces using `` or %x around command literals.
Style/CommandLiteral:
  Enabled: true

# Checks that comment annotation keywords are written according to guidelines.
Style/CommentAnnotation:
  Enabled: true

# Checks for comments put on the same line as some keywords. These keywords are: `class`, `module`, `def`, `begin`,
# `end`.
Style/CommentedKeyword:
  Enabled: true

## DISABLED
# # Enforces the use of `Comparable#clamp` instead of comparison by minimum and maximum.
# Style/ComparableClamp:
#   Enabled: true

# Enforces the use of `Array#push(item)` instead of `Array#concat([item])` to avoid redundant array literals.
Style/ConcatArrayLiterals:
  Enabled: true

# Check for `if` and `case` statements where each branch is used for both the assignment and comparison of the same
# variable when using the return of the condition can be used instead.
Style/ConditionalAssignment:
  Enabled: true

## DISABLED
# # Checks that constants defined in classes and modules have an explicit visibility declaration.
# Style/ConstantVisibility:
#   Enabled: false

## DISABLED
# # Check that a copyright notice was given in each source file.
# Style/Copyright:
#   Enabled: false

## DISABLED
# # Checks for inheritance from `Data.define` to avoid creating the anonymous parent class.
# Style/DataInheritance:
#   Enabled: true

## DISABLED
# # Checks for consistent usage of the DateTime class over the Time class.
# # This cop is disabled by default since these classes, although highly overlapping, have particularities
# # that make them not replaceable in certain situations when dealing with multiple timezones and/or DST.
# Style/DateTime:
#   Enabled: false

# Checks for parentheses in the definition of a method, that does not take any arguments.
# Both instance and class/singleton methods are checked.
Style/DefWithParentheses:
  Enabled: true

# Checks for places where the `#__dir__` method can replace more complex constructs to retrieve a canonicalized
# absolute path to the current file.
Style/Dir:
  Enabled: true

# Prefer to use `Dir.empty?("path/to/dir")` when checking if a directory is empty.
Style/DirEmpty:
  Enabled: true

## DISABLED
# # Detects comments to enable/disable RuboCop. This is useful if want to make sure that every RuboCop error gets
# # fixed and not quickly disabled with a comment.
# Style/DisableCopsWithinSourceCodeDirective:
#   Enabled: false

## DISABLED
# # When using class_eval (or other eval) with string interpolation, add a comment block showing its appearance if
# # interpolated (a practice used in Rails code).
# Style/DocumentDynamicEvalDefinition:
#   Enabled: false

## DISABLED
# # Checks for missing top-level documentation of classes and modules.
# Style/Documentation:
#   Enabled: false

## DISABLED
# # Checks for missing documentation comment for public methods. It can optionally be configured to also require
# # documentation for non-public methods.
# Style/DocumentationMethod:
#   Enabled: false

## DISABLED
# # Detects double disable comments on one line. This is mostly to catch automatically generated comments that need to
# # be regenerated.
# Style/DoubleCopDisableDirective:
#   Enabled: false

# Checks for uses of double negation (!!) to convert something to a boolean value.
Style/DoubleNegation:
  Enabled: true

# Checks for loops which iterate a constant number of times, using a Range literal and `#each`. This can be done more
# readably using `Integer#times`.
Style/EachForSimpleLoop:
  Enabled: true

# Looks for `inject`/`reduce` calls where the passed in object is returned at the end and so could be replaced by
# `each_with_object` without the need to return the object at the end.
Style/EachWithObject:
  Enabled: true

# Checks for pipes for empty block parameters.
# NOTE: Pipes for empty block parameters do not cause syntax errors, but they are redundant.
Style/EmptyBlockParameter:
  Enabled: true

# Checks for case statements with an empty condition.
Style/EmptyCaseCondition:
  Enabled: true

# Checks for empty else-clauses, possibly including comments and/or an explicit `nil`.
Style/EmptyElse:
  Enabled: true

# Checks for using empty heredoc to reduce redundancy.
Style/EmptyHeredoc:
  Enabled: true

# Checks for parentheses for empty lambda parameters.
# NOTE: Parentheses for empty lambda parameters do not cause syntax errors, but they are redundant.
Style/EmptyLambdaParameter:
  Enabled: true

# Checks for the use of a method, the result of which would be a literal, like an empty array, hash, or string.
Style/EmptyLiteral:
  Enabled: true

# Checks for the formatting of empty method definitions.
# NOTE: A method definition is not considered empty if it contains comments.
Style/EmptyMethod:
  Enabled: true

# Checks ensures source files have no utf-8 encoding comments.
Style/Encoding:
  Enabled: true

# Checks for END blocks.
Style/EndBlock:
  Enabled: true

# Checks for endless methods.
Style/EndlessMethod:
  Enabled: true

# Checks for consistent usage of `ENV["HOME"]`. If `nil` is used as the second argument of `ENV.fetch`, it is treated
# as a bad case like `ENV[]`.
Style/EnvHome:
  Enabled: true

# Ensures that eval methods (`eval`, `instance_eval`, `class_eval` and `module_eval`) are given filename and line
# number values (`__FILE__` and `__LINE__`).
Style/EvalWithLocation:
  Enabled: true
  Exclude:
    - spec/**/*

# Checks for places where `Integer#even?` or `Integer#odd?` can be used.
Style/EvenOdd:
  Enabled: true

# Checks for exact regexp match inside Regexp literals.
Style/ExactRegexpMatch:
  Enabled: true

# Checks for use of the File.expand_path arguments.
Style/ExpandPathArguments:
  Enabled: true

# Enforces the use of explicit block argument to avoid writing block literal that just passes its arguments to another
# block.
Style/ExplicitBlockArgument:
  Enabled: true

# Enforces consistency when using exponential notation for numbers in the code (eg `1.2e4`).
Style/ExponentialNotation:
  Enabled: true

# Suggests `ENV.fetch` for the replacement of `ENV[]`.
Style/FetchEnvVar:
  Enabled: true

# Prefer to use `File.empty?("path/to/file")` when checking if a file is empty.
Style/FileEmpty:
  Enabled: true

# Favor `File.(bin)read` convenience methods.
Style/FileRead:
  Enabled: true

# Favor `File.(bin)write` convenience methods.
Style/FileWrite:
  Enabled: true

# Checks for division with integers coerced to floats.
Style/FloatDivision:
  Enabled: true

# Looks for uses of the `for` keyword.
Style/For:
  Enabled: true

# Enforces the use of a single string formatting utility.
Style/FormatString:
  Enabled: true

# Use a consistent style for named format string tokens.
Style/FormatStringToken:
  Enabled: true

# Helps you transition from mutable string literals to frozen string literals.
# It will add the `# frozen_string_literal: true` magic comment to the top of files to enable frozen string literals.
Style/FrozenStringLiteralComment:
  Enabled: true
  EnforcedStyle: always

# Enforces the use of `$stdout`/`$stderr`/`$stdin` instead of `STDOUT`/`STDERR`/`STDIN`.
Style/GlobalStdStream:
  Enabled: true

# Looks for uses of global variables.
Style/GlobalVars:
  Enabled: true

# Use a guard clause instead of wrapping the code inside a conditional expression
Style/GuardClause:
  Enabled: true

# Checks for presence of braces around hash literal as a last array item.
# Use `[1, 2, { one: 1, two: 2 }]` instead of `[1, 2, one: 1, two: 2]`
Style/HashAsLastArrayItem:
  Enabled: true

# Checks the usage of pre-2.1 `Hash[args]` method of converting enumerables and sequences of values to hashes.
Style/HashConversion:
  Enabled: true

# Checks for uses of `each_key` and `each_value` Hash methods.
Style/HashEachMethods:
  Enabled: true

# Checks for usages of `Hash#reject`, `Hash#select`, and `Hash#filter` methods that can be replaced with
# `Hash#except` method.
Style/HashExcept:
  Enabled: true

# Checks for places where case-when represents a simple 1:1 mapping and can be replaced with a hash lookup.
Style/HashLikeCase:
  Enabled: true

# Checks hash literal syntax.
# Use Ruby >= 1.9 syntax for hashes. Prefer { a: :b } over { :a => :b }.
Style/HashSyntax:
  Enabled: true
  EnforcedShorthandSyntax: either

# Looks for uses of `_.each_with_object({}) {...}`, `_.map {...}.to_h`, and `Hash[_.map {...}]` that are actually just
# transforming the keys of a hash, and tries to use a simpler & faster call to `transform_keys` instead.
Style/HashTransformKeys:
  Enabled: true

# 
# Looks for uses of `_.each_with_object({}) {...}`, `_.map {...}.to_h`, and `Hash[_.map {...}]` that are actually just
# transforming the values of a hash, and tries to use a simpler & faster call to `transform_values` instead.
Style/HashTransformValues:
  Enabled: true

# Checks for identical expressions at the beginning or end of each branch of a conditional expression.
Style/IdenticalConditionalBranches:
  Enabled: true

# If the `else` branch of a conditional consists solely of an `if` node, it can be combined with the `else` to become
# an `elsif`.
Style/IfInsideElse:
  Enabled: true

# Checks for `if` and `unless` statements that would fit on one line
Style/IfUnlessModifier:
  Enabled: true

# Checks for `if` and `unless` statements used as modifiers of other `if` or `unless` statements.
Style/IfUnlessModifierOfIfUnless:
  Enabled: true

# Checks for redundant `if` with boolean literal branches.
Style/IfWithBooleanLiteralBranches:
  Enabled: true

# Checks for uses of semicolon in if statements.
Style/IfWithSemicolon:
  Enabled: true

# Use `raise ArgumentError, "Error message here"` instead of `raise "Error message here"`.
Style/ImplicitRuntimeError:
  Enabled: true

# Checks for `in ...;` uses in case expressions.
Style/InPatternThen:
  Enabled: true

# Use `Kernel#loop` for infinite loops.
Style/InfiniteLoop:
  Enabled: true

## DISABLED
# # Checks for trailing inline comments.
# Style/InlineComment:
#   Enabled: false

# Check for usages of `not` or `!` called on a method when an inverse of that method can be used instead.
Style/InverseMethods:
  Enabled: true

## DISABLED
# # Checks for usages of unless which can be replaced by if with inverted condition. Code without unless is easier to
# # read, but that is subjective, so this cop is disabled by default.
# Style/InvertibleUnlessCondition:
#   Enabled: false

# Checks for hardcoded IP addresses, which can make code brittle
Style/IpAddresses:
  Enabled: true

# Enforces that optional keyword parameters are placed at the end of the parameters list.
Style/KeywordParametersOrder:
  Enabled: true

# Checks for uses of the lambda literal syntax for single line lambdas, and the method call syntax for multiline lambdas.
Style/Lambda:
  Enabled: true

# Checks for use of the `lambda.(args)` syntax.
Style/LambdaCall:
  Enabled: true

# Checks for string literal concatenation at the end of a line.
Style/LineEndConcatenation:
  Enabled: true

# Ensures magic comments are written consistently throughout your code base
Style/MagicCommentFormat:
  Enabled: true

# Prefer `select` or `reject` over `map { ... }.compact`.
Style/MapCompactWithConditionalBlock:
  Enabled: true

# Checks for usages of each with `<<`, `push`, or `append` which can be replaced by `map`.
Style/MapIntoArray:
  Enabled: true

# Looks for uses of `map.to_h` or `collect.to_h` that could be written with just `to_h`.
Style/MapToHash:
  Enabled: true

# Looks for uses of `map.to_set` or `collect.to_set` that could be written with just `to_set`.
Style/MapToSet:
  Enabled: true

# Enforces the presence of parentheses in method calls containing parameters.
Style/MethodCallWithArgsParentheses:
  Enabled: true
  Exclude:
    - spec/**/*

# Checks for unwanted parentheses in parameterless method calls.
Style/MethodCallWithoutArgsParentheses:
  Enabled: true

# Use `a { b }.c` instead of `
# a do
#  b
# end.c`
Style/MethodCalledOnDoEndBlock:
  Enabled: true

# Defining a method with parameters needs parentheses.
Style/MethodDefParentheses:
  Enabled: true

# Checks for potential uses of `Enumerable#minmax`.
Style/MinMax:
  Enabled: true

# Enforces the use of `max` or `min` instead of comparison for greater or less.
Style/MinMaxComparison:
  Enabled: true

## DISABLED
# # Checks for if expressions that do not have an else branch. 
# Style/MissingElse:
#   Enabled: false

# Checks for the presence of `method_missing` without also defining `respond_to_missing?`.
Style/MissingRespondToMissing:
  Enabled: true

# Checks for grouping of mixins in class and module bodies.
Style/MixinGrouping:
  Enabled: true

# Checks that `include`, `extend` and `prepend` statements appear inside classes and modules, not at the top level,
# so as to not affect the behavior of `Object`.
Style/MixinUsage:
  Enabled: true

# Checks for use of `extend self` or `module_function` in a module.
Style/ModuleFunction:
  Enabled: true

# Checks for chaining of a block after another block that spans multiple lines.
Style/MultilineBlockChain:
  Enabled: true

# Checks for uses of if/unless modifiers with multiple-lines bodies.
Style/MultilineIfModifier:
  Enabled: true

# Checks for uses of the `then` keyword in multi-line `if` statements.
Style/MultilineIfThen:
  Enabled: true

# Checks for uses of the `then` keyword in multi-line `in` statement.
Style/MultilineInPatternThen:
  Enabled: true

# Checks expressions wrapping styles for multiline memoization.
Style/MultilineMemoization:
  Enabled: true

## DISABLED
# # Checks for method signatures that span multiple lines.
# Style/MultilineMethodSignature:
#   Enabled: false

# Checks for multi-line ternary op expressions.
Style/MultilineTernaryOperator:
  Enabled: true

# Checks for uses of the `then` keyword in multi-line `when` statements.
Style/MultilineWhenThen:
  Enabled: true

# Checks against comparing a variable with multiple items, where `Array#include?`, `Set#include?` or a `case` could be
# used instead to avoid code repetition.
Style/MultipleComparison:
  Enabled: true

# Checks whether some constant value isnâ€™t a mutable literal (e.g. array or hash).
Style/MutableConstant:
  Enabled: true

# Checks for uses of `if` with a negated condition. Only ifs without else are considered.
Style/NegatedIf:
  Enabled: true

# Checks for uses of if-else and ternary operators with a negated condition which can be simplified by inverting
# condition and swapping branches.
Style/NegatedIfElseCondition:
  Enabled: true

# Checks for uses of `unless` with a negated condition. Only unless without else are considered.
Style/NegatedUnless:
  Enabled: true

# Checks for uses of `while` with a negated condition.
Style/NegatedWhile:
  Enabled: true

# Checks for nested `File.dirname`.
# NOTE: It replaces nested File.dirname with the level argument introduced in Ruby 3.1.
Style/NestedFileDirname:
  Enabled: true

# Checks for nested use of `if`, `unless`, `while` and `until` in their modifier form.
Style/NestedModifier:
  Enabled: true

# Checks for unparenthesized method calls in the argument list of a parenthesized method call.
# Use `method1(method2(arg))` instead of `method1(method2 arg)`.
Style/NestedParenthesizedCalls:
  Enabled: true

# Checks for nested ternary op expressions.
Style/NestedTernaryOperator:
  Enabled: true

# Use `next` to skip iteration instead of a condition at the end.
Style/Next:
  Enabled: true

# Checks for comparison of something with nil using `==`. Prefer `nil?`
Style/NilComparison:
  Enabled: true

# Checks for lambdas and procs that always return nil, which can be replaced with an empty lambda or proc instead.
Style/NilLambda:
  Enabled: true

# Checks for non-nil checks, which are usually redundant.
# Use `if x ... end` instead of `if x != nil ... end`
Style/NonNilCheck:
  Enabled: true

# Checks for uses of the keyword `not` instead of `!`.
Style/Not:
  Enabled: true

# Checks for numbered parameters.
Style/NumberedParameters:
  Enabled: true

# Detects use of an excessive amount of numbered parameters in a single block.
Style/NumberedParametersLimit:
  Enabled: true

# Checks for octal, hex, binary, and decimal literals using uppercase prefixes and corrects them to lowercase prefix
# or no prefix (in case of decimals).
Style/NumericLiteralPrefix:
  Enabled: true

# Checks for big numeric literals without _ between groups of digits in them.
# Use `1_000_000` instead of `1000000`.
Style/NumericLiterals:
  Enabled: true

# Checks for usage of comparison operators (`==`, `>`, `<`) to test numbers as zero, positive, or negative.
# Use `zero?`, `positive?` or `negative?` instead.
Style/NumericPredicate:
  Enabled: true

# Enforces the use of consistent method names`Object#then`.
Style/ObjectThen:
  Enabled: true

# Checks for uses of `if`/`then`/`else`/`end` constructs on a single line.
Style/OneLineConditional:
  Enabled: true

# Flags uses of OpenStruct, as it is now officially discouraged to be used for performance, version compatibility,
# and potential security issues. Use `Struct` class instead.
Style/OpenStructUse:
  Enabled: true

# Checks for redundant dot before operator method call.
Style/OperatorMethodCall:
  Enabled: true

# Checks for options hashes and discourages them if the current Ruby version supports keyword arguments.
# Use `def fry(temperature: 300) ... end` instead of `def fry(options = {}) ... end`
Style/OptionHash:
  Enabled: true

# 
Style/OptionalArguments:
  Enabled: true

# 
Style/OptionalBooleanParameter:
  Enabled: true

# 
Style/OrAssignment:
  Enabled: true

# 
Style/ParallelAssignment:
  Enabled: true

# 
Style/ParenthesesAroundCondition:
  Enabled: true

# 
Style/PercentLiteralDelimiters:
  Enabled: true

# 
Style/PercentQLiterals:
  Enabled: true

# 
Style/PerlBackrefs:
  Enabled: true

# 
Style/PreferredHashMethods:
  Enabled: true

# 
Style/Proc:
  Enabled: true

# 
Style/QuotedSymbols:
  Enabled: true

# 
Style/RaiseArgs:
  Enabled: true

# 
Style/RandomWithOffset:
  Enabled: true

# 
Style/RedundantArgument:
  Enabled: true

# 
Style/RedundantArrayConstructor:
  Enabled: true

# 
Style/RedundantAssignment:
  Enabled: true

# 
Style/RedundantBegin:
  Enabled: true

# 
Style/RedundantCapitalW:
  Enabled: true

# Prefer a = b || c over a = b ? b : c
Style/RedundantCondition:
  Enabled: true

# 
Style/RedundantConditional:
  Enabled: true

# 
Style/RedundantConstantBase:
  Enabled: true

# 
Style/RedundantCurrentDirectoryInPath:
  Enabled: true

# 
Style/RedundantDoubleSplatHashBraces:
  Enabled: true

# 
Style/RedundantEach:
  Enabled: true

# 
Style/RedundantException:
  Enabled: true

# 
Style/RedundantFetchBlock:
  Enabled: true

# 
Style/RedundantFileExtensionInRequire:
  Enabled: true

# 
Style/RedundantFilterChain:
  Enabled: true

# 
Style/RedundantFreeze:
  Enabled: true

# 
Style/RedundantHeredocDelimiterQuotes:
  Enabled: true

# 
Style/RedundantInitialize:
  Enabled: true

# 
Style/RedundantInterpolation:
  Enabled: true

# 
Style/RedundantLineContinuation:
  Enabled: true

# 
Style/RedundantParentheses:
  Enabled: true

# Use quotes for string literals when they are enough.
Style/RedundantPercentQ:
  Enabled: true

# 
Style/RedundantRegexpArgument:
  Enabled: true

# 
Style/RedundantRegexpCharacterClass:
  Enabled: true

# 
Style/RedundantRegexpConstructor:
  Enabled: true

# 
Style/RedundantRegexpEscape:
  Enabled: true

# 
Style/RedundantReturn:
  Enabled: true
  AllowMultipleReturnValues: true

# 
Style/RedundantSelf:
  Enabled: true

# 
Style/RedundantSelfAssignment:
  Enabled: true

# 
Style/RedundantSelfAssignmentBranch:
  Enabled: true

# 
Style/RedundantSort:
  Enabled: true

# 
Style/RedundantSortBy:
  Enabled: true

# 
Style/RedundantStringEscape:
  Enabled: true

# 
Style/RegexpLiteral:
  Enabled: true

# Sort `require` and `require_relative` in alphabetical order.
Style/RequireOrder:
  Enabled: true

# 
Style/RescueModifier:
  Enabled: true

# 
Style/RescueStandardError:
  Enabled: true

## DISABLED
# # Enforces consistency between return nil and return.
# # This cop is disabled by default. Because there seems to be a perceived semantic difference between return and return nil
# Style/ReturnNil:
#   Enabled: false

# 
Style/ReturnNilInPredicateMethodDefinition:
  Enabled: true

# 
Style/SafeNavigation:
  Enabled: true

# 
Style/Sample:
  Enabled: true

# 
Style/SelectByRegexp:
  Enabled: true

# 
Style/SelfAssignment:
  Enabled: true

# 
Style/Semicolon:
  Enabled: true
  AllowAsExpressionSeparator: true

## DISABLED
# # Checks for the use of the `send` method.
# Style/Send:
#   Enabled: false

# 
Style/SignalException:
  Enabled: true

# 
Style/SingleArgumentDig:
  Enabled: true

## DISABLED
# # Checks whether the block parameters of a single-line method accepting a block match the names specified via configuration.
# Style/SingleLineBlockParams:
#   Enabled: false

# 
Style/SingleLineDoEndBlock:
  Enabled: true

# 
Style/SingleLineMethods:
  Enabled: true

# 
Style/SlicingWithRange:
  Enabled: true

# 
Style/SoleNestedConditional:
  Enabled: true

# 
Style/SpecialGlobalVars:
  Enabled: true

# 
Style/StabbyLambdaParentheses:
  Enabled: true

## DISABLED
# # Checks for places where classes with only class methods can be replaced with a module
# Style/StaticClass:
#   Enabled: false

# 
Style/StderrPuts:
  Enabled: true

# 
Style/StringChars:
  Enabled: true

# 
Style/StringConcatenation:
  Enabled: true

## DISABLED
# # Checks for the use of strings as keys in hashes. The use of symbols is preferred instead.
# # Use `{ one: 1, two: 2, three: 3 }` instead of `{ "one" => 1, "two" => 2, "three" => 3 }`
# Style/StringHashKeys:
#   Enabled: false

# Check quotes usage according to lint rule below.
Style/StringLiterals:
  Enabled: true
  EnforcedStyle: double_quotes

# 
Style/StringLiteralsInInterpolation:
  Enabled: true

# Enforces the use of consistent method names from the String class. 
Style/StringMethods:
  Enabled: true

# Identifies places where `lstrip.rstrip` can be replaced by `strip`.
Style/Strip:
  Enabled: true

# 
Style/StructInheritance:
  Enabled: true

# 
Style/SuperWithArgsParentheses:
  Enabled: true

# 
Style/SwapValues:
  Enabled: true

# 
Style/SymbolArray:
  Enabled: true

# 
Style/SymbolLiteral:
  Enabled: true

# 
Style/SymbolProc:
  Enabled: true

# 
Style/TernaryParentheses:
  Enabled: true

# Newcomers to ruby applications may write top-level methods, when ideally they should be organized in appropriate
# classes or modules
Style/TopLevelMethodDefinition:
  Enabled: true

# 
Style/TrailingBodyOnClass:
  Enabled: true

# 
Style/TrailingBodyOnMethodDefinition:
  Enabled: true

# 
Style/TrailingBodyOnModule:
  Enabled: true

# 
Style/TrailingCommaInArguments:
  Enabled: true

# 
Style/TrailingCommaInArrayLiteral:
  Enabled: true

## DISABLED
# # Checks whether trailing commas in block arguments are required.
# Style/TrailingCommaInBlockArgs:
#   Enabled: false

# 
Style/TrailingCommaInHashLiteral:
  Enabled: true

# 
Style/TrailingMethodEndStatement:
  Enabled: true

# 
Style/TrailingUnderscoreVariable:
  Enabled: true

# 
Style/TrivialAccessors:
  Enabled: true

# 
Style/UnlessElse:
  Enabled: true

# Checks for the use of logical operators in an unless condition. It discourages such code, as the condition becomes
# more difficult to read and understand.
Style/UnlessLogicalOperators:
  Enabled: true

# 
Style/UnpackFirst:
  Enabled: true

# 
Style/VariableInterpolation:
  Enabled: true

# 
Style/WhenThen:
  Enabled: true

# 
Style/WhileUntilDo:
  Enabled: true

# 
Style/WhileUntilModifier:
  Enabled: true

# 
Style/WordArray:
  Enabled: true

# 
Style/YAMLFileRead:
  Enabled: true

# 
Style/YodaCondition:
  Enabled: true

## DISABLED
# # Forbids Yoda expressions, i.e. binary operations (using *, +, &, |, and ^ operators) where the order of expression
# # is reversed, eg. `1 + x`.
# # This cop is disabled by default to respect user intentions such as:
# # `config.server_port = 9000 + ENV["TEST_ENV_NUMBER"].to_i`
# Style/YodaExpression:
#   Enabled: false

# 
Style/ZeroLengthPredicate:
  Enabled: true

# 
Performance/BindCall:
  Enabled: true

# 
Performance/FlatMap:
  Enabled: true

# 
Performance/MapCompact:
  Enabled: true

# 
Performance/SelectMap:
  Enabled: true

# 
Performance/RedundantMerge:
  Enabled: true

# 
Performance/StartWith:
  Enabled: true

# 
Performance/EndWith:
  Enabled: true

# 
Performance/RegexpMatch:
  Enabled: true

# 
Performance/ReverseEach:
  Enabled: true

# 
Performance/StringReplacement:
  Enabled: true

# 
Performance/DeletePrefix:
  Enabled: true

# 
Performance/DeleteSuffix:
  Enabled: true

# 
Performance/InefficientHashSearch:
  Enabled: true

# 
Performance/ConstantRegexp:
  Enabled: true

# 
Performance/RedundantStringChars:
  Enabled: true

# 
Performance/StringInclude:
  Enabled: true
